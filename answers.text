How Web Works Exercise

Part One: Solidify Terminology

In your own terms, define the following terms:

What is HTTP?
    Answer: Hyper Text Transfer Protocol; The communications protocol used to connect to web servers on the Internet or on a local network.
What is a URL?
    Answer: Uniform Resource Locator; an address for some internet resource.
What is DNS?
    Answer: Domain Name System; a system to take human-readable URLs and convert them to IP addresses. The 'phone book' of the Internet.
What is a query string?
    Answer: A string of data that gets passed into the URL to be put into a GET request.
What are two HTTP verbs and how are they different?
    Answer: GET & POST; GET = retrieve data from the server; POST = send data to the server.
What is an HTTP request?
    Answer: A request from a client to a server which follows the HTTP protocol. (Requesting the HTML for a certain web page)
What is an HTTP response?
    Answer: A response from a server to a client which follows the HTTP protocol. (Server sending back the clients requested HTML/CSS/JS/etc)
What is an HTTP header? Give a couple examples of request and response headers you have seen.
    Answer: Headers provide additional information about the request or the response. Here are some examples:
            Request headers: Host, User-Agent, Accept, Cookie, Cache-Control
            Response headers: Content-Type, Last-Modified, Set-Cookie, Cache-Control
What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
    Answer: 1. Your browser “resolves” the name into an IP address using DNS
            2. Your browser makes a request to that IP address, including headers (info about browser, any previous cookies, and other things)
            3. The server sends a response (typically, HTML, with a status code (200 if it was sucessful)
            4. The browser makes a DOM from that HTML, and finds any other resources needed (images, CSS, JavaScript, etc)
            5. The browser makes separate HTTP requests for those resources and receives response from the server for each



Part Two: Practice Tools

Using curl, make a GET request to the icanhazdadjoke.com API to find all jokes involving the word “pirate”

Use dig to find what the IP address is for icanhazdadjoke.com

Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.



Part Three: Explore Dev Tools

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? 
Explore in Chrome how you can view the request and response headers, as well as the form data.



Part Four: Explore the URL API

At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

Read about the URL API

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.